<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-06-11T13:04:55-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mataiodoxia</title><subtitle>A personal blog site for code, math, and privacy.
</subtitle><author><name>Lucas Masterson</name><email>lucasmasterson@protonmail.com</email></author><entry><title type="html">Protohackers Challenge 00: Smoke Test in Rust and Setting up DigitalOcean</title><link href="http://localhost:4000/blog/2025-06-11-2025-06-11-protohackers-00/" rel="alternate" type="text/html" title="Protohackers Challenge 00: Smoke Test in Rust and Setting up DigitalOcean" /><published>2025-06-11T13:04:55-07:00</published><updated>2025-06-11T13:04:33-07:00</updated><id>http://localhost:4000/blog/2025-06-11-protohackers-00</id><content type="html" xml:base="http://localhost:4000/blog/2025-06-11-2025-06-11-protohackers-00/"><![CDATA[<h2 id="problem-statement"><a href="https://protohackers.com/problem/0">Problem Statement</a></h2>

<blockquote>
0: Smoke Test

Deep inside Initrode Global's enterprise management framework lies a component that writes data to a server and expects to read the same data back. (Think of it as a kind of distributed system delay-line memory). We need you to write the server to echo the data back. <br /><br />

Accept TCP connections. <br /><br />

Whenever you receive data from a client, send it back unmodified. <br /><br />

Make sure you don't mangle binary data, and that you can handle at least 5 simultaneous clients. <br /><br />

Once the client has finished sending data to you it shuts down its sending side. Once you've reached end-of-file on your receiving side, and sent back all the data you've received, close the socket so that the client knows you've finished. (This point trips up a lot of proxy software, such as ngrok; if you're using a proxy and you can't work out why you're failing the check, try hosting your server in the cloud instead). <br /><br />

Your program will implement the TCP Echo Service from RFC 862.
</blockquote>

<h2 id="hosting-a-server">Hosting a Server</h2>

<p>The most important problem at hand is to figure out whether I want to host this server locally or on some VPS. I recently came to find out that my GitHub Education License actually provides me $200 worth of credits for DigitalOcean.</p>

<p>I went onto DigitalOcean, opened an account, and set up a VM:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">2 GB Memory / 1 AMD vCPU / 50 GB Disk / SFO3 - Ubuntu 24.10 x64
</span></code></pre></div></div>

<p>For our task, these specs are completely fine (if you actually write safe code, as you’ll see when I try to solve later iterations of the challenges). As with all open ports on the internet, it was caught in massive netscans and promptly attacked by dozens of other IPs trying to authenticate. To combat this, I set up <code class="language-plaintext highlighter-rouge">ufw</code> and <code class="language-plaintext highlighter-rouge">fail2ban</code> to drop all connections not from explicitly defined IPs and to ban IPs that tried to authenticate incorrectly more than 3 times.</p>

<p>Initially, I did have trouble with my first two droplets, which I ended up bricking or screwing up network settings pretty badly. I ended up destroying those droplets and setting up the one mentioned above.</p>

<p>My updated config:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rs-protohackers:~/tcp/challenges#</span><span class="w"> </span>ufw status verbose
<span class="go">Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), disabled (routed)
New profiles: skip

To                         Action      From
--                         ------      ----
</span><span class="gp">22/tcp                     ALLOW IN    &lt;My IP&gt;</span><span class="w">
</span><span class="gp">4040/tcp                   ALLOW IN    &lt;My IP&gt;</span><span class="w">
</span><span class="go">4040/tcp                   ALLOW IN    206.189.113.124
</span></code></pre></div></div>

<h2 id="solving-the-task">Solving the Task</h2>

<p>I decided to write this simple TCP echo server using Rust’s <code class="language-plaintext highlighter-rouge">std::net</code> library which provides <code class="language-plaintext highlighter-rouge">TcpListener</code> and <code class="language-plaintext highlighter-rouge">TcpStream</code>, and run these on spawned threads – which, frankly, is a really bad design choice, but the level of testing this first challenge performs won’t cause anything too unfavorable to happen.</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">net</span><span class="p">::{</span><span class="n">TcpListener</span><span class="p">,</span> <span class="n">TcpStream</span><span class="p">};</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">io</span><span class="p">::{</span><span class="n">Read</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="n">thread</span><span class="p">;</span>
</code></pre></div></div>

<p>Let’s write our main function and generate a listener.</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">run</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="nn">std</span><span class="p">::</span><span class="nn">io</span><span class="p">::</span><span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Port opened on 4040"</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">listener</span> <span class="o">=</span> <span class="nn">TcpListener</span><span class="p">::</span><span class="nf">bind</span><span class="p">(</span><span class="s">"0.0.0.0:4040"</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>

    <span class="k">for</span> <span class="n">stream</span> <span class="k">in</span> <span class="n">listener</span><span class="nf">.incoming</span><span class="p">()</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"Received stream from {:?}"</span><span class="p">,</span> <span class="n">stream</span><span class="p">);</span>
        <span class="nf">handle_client</span><span class="p">(</span><span class="n">stream</span><span class="o">?</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nf">Ok</span><span class="p">(())</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I wrote this function in a <code class="language-plaintext highlighter-rouge">pub fn run() -&gt; std::io::Result&lt;()&gt;</code> because I’ve attached it to a larger crate where I can specify which challenge to run: <code class="language-plaintext highlighter-rouge">cargo r 0</code>. I’m working on improving the modularity and placing each challenge in a different crate, but we’re getting there. For the scope of this first task, this approach is completely fine.</p>

<p>Now as for how the code works:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">pub fn run() -&gt; std::io::Result&lt;()&gt;</code> will act as our de facto <code class="language-plaintext highlighter-rouge">main()</code> function, and returns a <code class="language-plaintext highlighter-rouge">Result</code> which will tell us whether our program panics or successful completes (returns an <code class="language-plaintext highlighter-rouge">Ok(())</code>).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">let listener = TcpListener::bind("0.0.0.0:4040")?;</code> tells the program to open a port with full access from the internet on port <code class="language-plaintext highlighter-rouge">4040</code>. We require the <code class="language-plaintext highlighter-rouge">?</code> to handle the <code class="language-plaintext highlighter-rouge">Result</code> returned by <code class="language-plaintext highlighter-rouge">bind()</code> quietly.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">for stream in listener.incoming() {}</code> just catches each stream opened to our port and allows us to iterate over them.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">handle_client(stream?);</code> is a user defined function that will contain our code to handle the “echo” part of our TCP echo server.</p>
  </li>
</ul>

<p>For <code class="language-plaintext highlighter-rouge">handle_client()</code>:</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">handle_client</span><span class="p">(</span><span class="k">mut</span> <span class="n">stream</span><span class="p">:</span> <span class="n">TcpStream</span><span class="p">)</span> <span class="p">{</span>
    <span class="nn">thread</span><span class="p">::</span><span class="nf">spawn</span><span class="p">(</span><span class="k">move</span> <span class="p">||</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">buffer</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="mi">1024</span><span class="p">];</span>
        <span class="k">loop</span> <span class="p">{</span>
            <span class="k">match</span> <span class="n">stream</span><span class="nf">.read</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">buffer</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">Ok</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
                    <span class="nd">println!</span><span class="p">(</span><span class="s">"Connection close"</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nf">Ok</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="k">let</span> <span class="nf">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=</span> <span class="n">stream</span><span class="nf">.write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">[</span><span class="o">..</span><span class="n">n</span><span class="p">])</span> <span class="p">{</span>
                        <span class="nd">eprintln!</span><span class="p">(</span><span class="s">"Write error: {:?}"</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="nf">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
                    <span class="nd">eprintln!</span><span class="p">(</span><span class="s">"Read error: {:?}"</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>We take a parameter <code class="language-plaintext highlighter-rouge">mut stream: TcpStream</code>, which is our TCP stream (as the name suggests). We need to take this mutably so we can edit data in the stream to render to the sender.</p>
  </li>
  <li>
    <p>Now for the “unsafe” part of this code. We use <code class="language-plaintext highlighter-rouge">thread::spawn()</code> to spawn threads for each stream taken up by our TCP server, allocating a lot of resource to handle each request (I say “for each stream” because we’re executing this function in the <code class="language-plaintext highlighter-rouge">for</code> loop of the <code class="language-plaintext highlighter-rouge">run()</code> function).</p>
  </li>
  <li>
    <p>We then make a buffer object: <code class="language-plaintext highlighter-rouge">let mut buffer: [u8; 1024] = [0; 1024]</code>, which is a <code class="language-plaintext highlighter-rouge">1024</code> byte array. The <code class="language-plaintext highlighter-rouge">[u8; 1024]</code> part is actually implicit because the Rust compiler is smart and understands we are trying to write raw bytes. Anyhow, this <code class="language-plaintext highlighter-rouge">buffer</code> will allow us to write raw data into it.</p>
  </li>
  <li>
    <p>For each thread spawned, we do a <code class="language-plaintext highlighter-rouge">loop</code> until termination. In this loop, we’re handling the request of the sender. We use a <code class="language-plaintext highlighter-rouge">match stream.read(&amp;mut buffer) {}</code> to read requests. The <code class="language-plaintext highlighter-rouge">read()</code> function reads data from the stream into some parameter variable, which we’ve set as a mutable reference to <code class="language-plaintext highlighter-rouge">buffer</code>. So, for the stream, we’re reading its data mutably into our <code class="language-plaintext highlighter-rouge">buffer</code> variable.</p>
  </li>
  <li>
    <p>We have three branches for our <code class="language-plaintext highlighter-rouge">match</code> statement, so let’s go over them individually.</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">Ok(0) =&gt; { break; }</code> indicates an EOF (end of file). The problem statements tells us to break the connection and return the data our server received. You might have noticed that in this branch we’re not actually returning any data? Well, that’s because if we’re at an EOF, we’ve already returned all the data we need to, so we just have to close the connection as we’ll see in the second branch.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">Ok(n) =&gt; { }</code> is where we actually receive data that can be read. The <code class="language-plaintext highlighter-rouge">n</code> is a <code class="language-plaintext highlighter-rouge">usize</code> that tells us the number of bytes of data that were read from the stream. The ensuing <code class="language-plaintext highlighter-rouge">if let Err(e) = stream.write_all(&amp;buffer[..n]) {}</code> basically says “if writing into the stream fails, do the thing in the if statement,” which is to write an error connection and break the message. The “default” behavior, I guess you could say, is to <code class="language-plaintext highlighter-rouge">write_all</code> into the buffer. Except, if we just write into <code class="language-plaintext highlighter-rouge">&amp;buffer</code>, we don’t know how many bytes we’re supposed to be writing in, leading to some memory issues. It follows that we must specify how many bytes we want to write, which turns out the be editing the first <code class="language-plaintext highlighter-rouge">n</code> bytes of that <code class="language-plaintext highlighter-rouge">buffer</code> using the <code class="language-plaintext highlighter-rouge">[..n]</code>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">Err(e) =&gt; { }</code> just tells us that if we have an error reading the stream, print an error message and break the connection.</p>
      </li>
    </ul>
  </li>
</ul>

<p>And thus, that concludes our code!</p>

<h2 id="results">Results</h2>

<p><img src="/assets/img/protohackers-0-results.png" alt="Protohackers Results 0: PASS" /></p>]]></content><author><name>Lucas Masterson</name><email>lucasmasterson@protonmail.com</email></author><category term="blog" /><summary type="html"><![CDATA[Problem Statement]]></summary></entry><entry><title type="html">How the NSA Probably Backdoored RSA</title><link href="http://localhost:4000/blog/2025-06-09-nsa-backdoor-rsa/" rel="alternate" type="text/html" title="How the NSA Probably Backdoored RSA" /><published>2025-06-09T00:00:00-07:00</published><updated>2025-06-09T14:04:17-07:00</updated><id>http://localhost:4000/blog/nsa-backdoor-rsa</id><content type="html" xml:base="http://localhost:4000/blog/2025-06-09-nsa-backdoor-rsa/"><![CDATA[<blockquote>
  <p>“Even if you’re not doing anything wrong, you are being watched and recorded.” –Edward J. Snowden</p>
</blockquote>

<p>In the annals of modern cryptography, one of the rather disturbing episodes is the NSA’s attempt to backdoor a cryptographic standard using <code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code>, a pseudorandom number generator (PRNG) that, under certain parameters, could function less like a secure random number generator and more like a master key (held, conveniently, by its creators).</p>

<p>This isn’t a theoretical issue. In fact, it’s confirmed. In 2013, internal documents leaked by Edward Snowden revealed that the NSA had deliberately influenced the design of <code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code> (Dual Elliptic Curve Deterministic Random Bit Generator) to make it suspectable to backdoor access, then actively pushed for it to be adopted as a standard by NIST (National Institute of Standards and Technology) and RSA Security.</p>

<h2 id="how-dual_ec_drbg-works">How Dual_EC_DRBG Works</h2>

<p>At its core, <code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code> is a deterministic random bit generator based on the mathematics of elliptic curves. While elliptic curve cryptography (ECC) is widely used and considered secure (think ECDSA, ECDH), it was quite an odd choice from the start.</p>

<p>From a high-level:</p>

<ul>
  <li>
    <p>It operates using public elliptic curve and two points on the curve, call them <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>.</p>
  </li>
  <li>
    <p>The secret internal state is updated by multiplying it by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> (as in scalar multiplication over the elliptic curve), then the output is derived via multiplication with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>.</p>
  </li>
  <li>
    <p>If the relationship between <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span> is known (i.e., there exists a scalar <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">dd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">dd</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>d</mi><mi>P</mi><mi>Q</mi><mo>=</mo><mi>d</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">Q=dPQ=dP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">PQ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>), then anyone with knowledge of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">dd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">dd</span></span></span></span> can recover the internal state from the outputs.</p>
  </li>
</ul>

<p>Think about that for a second. If you control the generation of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span> (as the NSA did), and if you knew the relationship between <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>, then you could very easily rewind the generator. What should be a one-way, irreversible process becomes a surveillance engineer’s wet dream.</p>

<p>Cloudflare actually provides an excellent breakdown showing how, with partial output and knowledge of this secret scalar <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>, one could recover the internal state and predict future outputs — effectively compromising all cryptographic operations that depend on this PRNG, including TLS sessions and VPN tunnels (which generally aren’t meant explicitly for security, but case in point).</p>

<h2 id="a-bit-lower">A Bit Lower</h2>

<p>The digits of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span> look random, but they’re predictable. That’s why we don’t use them (or any predictable sequence) as a source of randomness. Anyone who knows the algorithm can replicate it. That predictability undermines any cryptographic system relying on that randomness.</p>

<p>As such, PRNGs must be designed with significant caution. Most PRNGs start with some secret seed and generate outputs through some internal transformation. If the seed and internal state remain secret, the output appears random to an observer; if they’re exposed, the entire output stream can be reconstructed.</p>

<p>Linux’s <code class="language-plaintext highlighter-rouge">/dev/random</code> uses an internal entropy pool as its state. When a program requests random data, Linux runs that data through <code class="language-plaintext highlighter-rouge">SHA-1</code>, a one-way cryptographic hash. The idea is simple:</p>

<ul>
  <li>
    <p>Apply a one-way function (<code class="language-plaintext highlighter-rouge">SHA-1</code>) to the internal state.</p>
  </li>
  <li>
    <p>Mix the output back into the state.</p>
  </li>
  <li>
    <p>Hash unpredictable system events (e.g., mouse clicks, keypresses) and mix that in as well.</p>
  </li>
</ul>

<p>Diagrammatically:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">State --F--&gt;</span><span class="w"> </span>Output
<span class="go">State &lt;--G-- Output
</span></code></pre></div></div>

<p>Where:</p>

<ul>
  <li>
    <p>F = <code class="language-plaintext highlighter-rouge">SHA-1</code></p>
  </li>
  <li>
    <p>G = <code class="language-plaintext highlighter-rouge">SHA-1</code> + XOR + remix</p>
  </li>
</ul>

<p>So long as <code class="language-plaintext highlighter-rouge">SHA-1</code> is one-way, and the entropy is high, the design is robust. Even if you see the output, the internal state stays hidden.</p>

<p>With elliptic curve cryptography (ECC), we hinge on the hardness of the elliptic curve discrete logarithm problem (ECDLP).</p>

<p>Given a point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​ and a number <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>, we can compute:
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">Q = n \cdot P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, which is repeated elliptic curve “dotting.”</p>

<p>Getting <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span> is easy. Going backwards to find <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> given <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span> is hard – this is the ECDLP. Thus, we have a natural one-way function:</p>

<ul>
  <li>
    <p>Input: a number <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></p>
  </li>
  <li>
    <p>Output: the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>-coordinate of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">Q = n \cdot P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
  </li>
</ul>

<p>Here’s an analogy. Let’s say you’re playing billiards. You shoot the ball (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> times in a special elliptic curve table. The final position <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span> is easy to see, but reverse-engineering the number of shots (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>) is quite hard.</p>

<h2 id="introducing-a-backdoor">Introducing a Backdoor</h2>

<p>Let’s say we want to design a PRNG using ECC. Pick two points <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> on an elliptic curve. Construct two one-way functions:</p>

<ul>
  <li>
    <p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mtext>-coordinate of </mtext><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(n) = x \text{-coordinate of } (n \cdot P_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord text"><span class="mord">-coordinate of </span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>  </p>
  </li>
  <li>
    <p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mtext>-coordinate of </mtext><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msub><mi>P</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G(n) = x \text{-coordinate of } (n \cdot P_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord text"><span class="mord">-coordinate of </span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>  </p>
  </li>
</ul>

<p>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> are independent, this looks secure. But here’s the trick:</p>

<ul>
  <li>
    <p>Choose <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><mi>s</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_2 = s \cdot P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span> is secret.</p>
  </li>
  <li>
    <p>Now <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> are <em>not</em> independent. Rather, they’re related through some unknown multiplier <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>.</p>
  </li>
</ul>

<p>So when the PRNG does:</p>

<ul>
  <li>
    <p>Output: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">Q = n \cdot P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
  </li>
  <li>
    <p>Update state: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><mi>n</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>s</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mo>⋅</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">S = n \cdot P_2 = n \cdot (s \cdot P_1) = s \cdot (n \cdot P_1) = s \cdot Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></p>
  </li>
</ul>

<p>If you know <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>, and you observe <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span>, you can compute the new state <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> directly. The entire internal state is exposed. That breaks everything. This is exactly how <code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code> works.</p>

<h3 id="troubling">Troubling</h3>

<p><code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code> was published by NIST (with contributions from the NSA) and recommended as a PRNG standard. It uses two fixed elliptic curve points <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. However:</p>

<ol>
  <li>The values of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> were never justified.</li>
  <li>There was no verifiable process (e.g., hashing known seeds) used to generate them.</li>
  <li>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><mi>s</mi><mo>⋅</mo><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_2 = s \cdot P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span> is known only to the designer, then <code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code> contains a backdoor.</li>
</ol>

<p>This was implemented in 2013 using OpenSSL. Funnily enough, a patent describing this exact technique as a method of <strong>key escrow</strong> was filed in 2006!</p>

<h2 id="rsa">RSA</h2>

<p>The story takes an even more troubling turn when we consider how this became widely adopted. In 2006, NIST (under NSA influence) standardized <code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code>, despite <strong>known</strong> criticisms in the academic community by cryptographers about its suspicious structure and performance inefficiencies.</p>

<p>Here’s the real kicker: RSA Security allegedly accepted a $10 million contract from the NSA to make <code class="language-plaintext highlighter-rouge">Dual_EC_DRBG</code> the default PRNG in its flagship cryptographic library, BSAFE.</p>

<p>RSA obviously denied wrongdoing, stating they were simply following NIST standard. But the damage was done. NIST eventually withdrew the standard in 2014.</p>

<h2 id="surveillance-creep">Surveillance Creep</h2>
<p>This is most definitely <em>not</em> an isolated incident. It’s significantly broader pattern of deliberate sabotage and blatant manipulation by the NSA:</p>

<ul>
  <li>
    <p>Program BULLRUN: Leaked documents detailed efforts to insert vulnerabilities into commercial encryption systems, undermine standards, and tamper with the design of international cryptographic protocols.</p>
  </li>
  <li>
    <p>Compromised Hardware: Reports that the NSA intercepted shipments of Cisco routers to implant surveillance tools. It’s a complete nation-state supply chain poisoning.</p>
  </li>
  <li>
    <p>And surveillance en masse under PRISM and XKeyScore: Warrantless access to user data from major tech companies, dragnet-style collections of emails, search history, and real-time communication (often without <em>any</em> meaningful oversight).</p>
  </li>
</ul>

<p>So, is this an agency tasked with defending encryption or breaking it? Really makes you wonder</p>

<h2 id="why-should-you-care">Why Should You Care?</h2>

<p>Mass surveillance and the NSA’s frankly egregious desire to inject Americans with it is a very, very clear invasion of basic human rights in addition to a plethora of American laws (including the very constitution).</p>

<p>It doesn’t matter whether you’re a criminal or not, the government is recording you (note the initial quote). The politicians say they need more tools for surveillance so they can catch terrorists, and yet there’s been <em>no</em> substantial proof that this has actually helped in any way. In fact, the NSA, FBI, and other three letter agencies have been denounced for substantial failures to catch terrorists despite the massive breach of privacy operation they run. In fact, the FBI has been known to actively find and manipulate unstable individuals, encourage them to commit acts of terrorism (and given them the materials to do so), just to promptly arrest them and say, “Look! We got someone!”</p>

<p>As for our beloved constitution, it simply doesn’t mean <em>anything</em> to the NSA. It’s clear violation of our First, Fourth, AND Fifth Amendment rights.</p>
<ul>
  <li>
    <p>Freedom of Speech and Association? Hell no! Here’s a chilling effect though… And your journalists, activists, and religious organizations? Yeah, we’re prosecuting and censoring them.</p>
  </li>
  <li>
    <p>Protection from Unreasonable Searches and Seizures? You’d think you would have to have a warrant to conduct this surveillance… that’s a utterly stupid idea! Why would we need warrants to collection every single bit of information about you without probable cause? In fact, this practice has been ruled <em>unconstitutional</em> by multiple courts.</p>
  </li>
  <li>
    <p>Due Process? You didn’t need that anyway. There is <strong>no chance</strong> for individuals to challenge their inclusion in watchlists or databases. Programs like no-fly lists, built from secret intelligence, deny individuals liberty with minimal resources.</p>
  </li>
</ul>

<p>Some people say, “Well, if you’ve done nothing wrong, you’ve got nothing to hide.” The government is granting itself overwhelming power to peer into any individual’s life whenever it wants. They don’t discriminate. Ever heard of Nazi Germany and how they subverted society to push their agenda and normalize repression? Mass surveillance wasn’t and isn’t used to protect people, it’s used to control them. You might recall Pastor Martin Niemöller’s poem, “First They Came”:</p>
<blockquote>
  <p>First they came for the Communists <br />
And I did not speak out<br />
Because I was not a Communist<br />
Then they came for the Socialists<br />
And I did not speak out<br />
Because I was not a Socialist<br />
Then they came for the trade unionists<br />
And I did not speak out<br />
Because I was not a trade unionist<br />
Then they came for the Jews<br />
And I did not speak out<br />
Because I was not a Jew<br />
Then they came for me<br />
And there was no one left<br />
To speak out for me<br /></p>
</blockquote>

<p>The Nazis were able to prosecute and execute millions of people simply because they normalized it, used surveillance to silence opposition, and nobody lifted a finger. It’s the same as saying, “I shouldn’t have to worry because I’m not doing anything wrong.” You’re allowing the government to do whatever they want, whenever they want, and you expect them not to slowly start smothering your rights — because they most definitely well. Sure, some minority group is suddenly deported or some activist is put in prison for opposing state policy, but that won’t matter to you because they’re not you, right? … Until the day they are, and by then, it’s too late.</p>

<p>Rights don’t only exist for the guilty, they exist to protect the innocent from unchecked power. Once you surrender those rights, history shows that the governments rarely give them back.</p>]]></content><author><name>Lucas Masterson</name><email>lucasmasterson@protonmail.com</email></author><category term="blog" /><summary type="html"><![CDATA[A somewhat technical and ethical commentary on the NSA backdooring of RSA via Dual_EC_DRBG.]]></summary></entry></feed>